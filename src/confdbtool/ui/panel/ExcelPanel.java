/**
 * @date 2014/3/26 15:39
 * @author ChenLong
 */
package confdbtool.ui.panel;

import confdbtool.function.IPublish;
import confdbtool.function.OptionConfigure;
import confdbtool.function.excel.ExcelLists;
import confdbtool.function.db.DBOperator;
import confdbtool.function.db.DBOperatorException;
import confdbtool.function.excel.exception.CannotCastNumberException;
import confdbtool.function.excel.exception.ExplainEmptyException;
import confdbtool.function.generator.java.JavaGenerator;
import java.awt.EventQueue;
import java.io.File;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.showConfirmDialog;
import javax.swing.JTextArea;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;

/**
 * Excel导入操作面板
 *
 * @author ChenLong
 */
public class ExcelPanel extends javax.swing.JPanel
{
    private final Logger log = Logger.getLogger(ExcelPanel.class);
    private final JTextArea outTextArea;

    /**
     * Creates new form ExcelPanel
     *
     * @param outTextArea
     */
    public ExcelPanel(JTextArea outTextArea)
    {
        this.outTextArea = outTextArea;
        initComponents();
        refreshFileList();

        String val = System.getProperty("planningVersion");
        if (val != null)
        {
            generateLuaJavaCodeButton.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        createImportSingleTableButton = new javax.swing.JButton();
        createImportAllTableButton = new javax.swing.JButton();
        generateLuaJavaCodeButton = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentShown(java.awt.event.ComponentEvent evt)
            {
                formComponentShown(evt);
            }
        });

        jSplitPane1.setDividerSize(7);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                jSplitPane1ComponentResized(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        createImportSingleTableButton.setText("创建并导入单个表");
        createImportSingleTableButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                createImportSingleTableButtonActionPerformed(evt);
            }
        });

        createImportAllTableButton.setText("创建并导入全部表");
        createImportAllTableButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                createImportAllTableButtonActionPerformed(evt);
            }
        });

        generateLuaJavaCodeButton.setText("生成Lua/Java/JS代码");
        generateLuaJavaCodeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                generateLuaJavaCodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generateLuaJavaCodeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createImportAllTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createImportSingleTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(createImportSingleTableButton)
                .addGap(18, 18, 18)
                .addComponent(createImportAllTableButton)
                .addGap(18, 18, 18)
                .addComponent(generateLuaJavaCodeButton)
                .addContainerGap(463, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSplitPane1ComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_jSplitPane1ComponentResized
    {//GEN-HEADEREND:event_jSplitPane1ComponentResized
        // TODO add your handling code here:
        //jSplitPane1.setDividerLocation(0.8); 
        jSplitPane1.setDividerLocation(jSplitPane1.getWidth() - 200);
    }//GEN-LAST:event_jSplitPane1ComponentResized

    private void createImportSingleTableButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_createImportSingleTableButtonActionPerformed
    {//GEN-HEADEREND:event_createImportSingleTableButtonActionPerformed
        Object str = jList1.getSelectedValue();
        if (str == null)
        {
            JOptionPane.showConfirmDialog(null, "请选择excel文件", "提示", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        String selected = str.toString();
        if (JOptionPane.showConfirmDialog(null, "将清空 \"" + selected + "\" 表的现有数据, 并导入最新数据 ?", "确认", JOptionPane.YES_NO_OPTION, QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
            return;

        List<String> selectedList = new LinkedList<>();
        selectedList.add(OptionConfigure.getInstance().getExcelPath() + "\\" + selected);

        createAndImportTable(selectedList);
    }//GEN-LAST:event_createImportSingleTableButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
    {//GEN-HEADEREND:event_formComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void createImportAllTableButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_createImportAllTableButtonActionPerformed
    {//GEN-HEADEREND:event_createImportAllTableButtonActionPerformed
        if (JOptionPane.showConfirmDialog(null, "将清空全部数据, 并导入全部最新数据 ?", "确认", JOptionPane.YES_NO_OPTION, QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
            return;
        ListModel lm = jList1.getModel();

        List<String> selectedList = new LinkedList<>();
        for (int i = 0; i < lm.getSize(); ++i)
        {
            String name = (String) lm.getElementAt(i);
            selectedList.add(OptionConfigure.getInstance().getExcelPath() + "\\" + name);
        }

        createAndImportTable(selectedList);
    }//GEN-LAST:event_createImportAllTableButtonActionPerformed

    private void generateLuaJavaCodeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_generateLuaJavaCodeButtonActionPerformed
    {//GEN-HEADEREND:event_generateLuaJavaCodeButtonActionPerformed
        if (JOptionPane.showConfirmDialog(null, "生成Lua/Java/JS代码 ?", "确认", JOptionPane.YES_NO_OPTION, QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
            return;
        List<String> selected = new ArrayList<>();
        ListModel lm = jList1.getModel();

        for (int i = 0; i < lm.getSize(); ++i)
        {
            String name = (String) lm.getElementAt(i);
            selected.add(OptionConfigure.getInstance().getExcelPath() + "\\" + name);
        }
        generateLuaJavaCode(selected);
    }//GEN-LAST:event_generateLuaJavaCodeButtonActionPerformed

    /**
     * 该方法将在SwingWorker工作线程中执行
     *
     * @param excelNames
     */
    private void createAndImportTable(List<String> selected)
    {
        outTextArea.append("开始 ...\n");
        setAllButtonEnabled(false);
        new SwingWorker<String, String>()
        {
            private List<String> selected;

            public SwingWorker setSelected(List<String> selected)
            {
                this.selected = selected;
                return this;
            }

            @Override
            public String doInBackground()
            {
                for (String excelName : selected)
                {
                    try
                    {
                        publish(excelName);
                        createTable(excelName);
                        importExcel(excelName);
                    }
                    catch (Exception ex)
                    {
                        displayException(ex);
                    }
                }
                return "";
            }

            @Override
            public void process(List<String> data)
            {
                for (String str : data)
                {
                    outTextArea.append("创建并导入: " + str + "\n");
                }
            }

            @Override
            public void done()
            {
                outTextArea.append("完成\n");
                setAllButtonEnabled(true);
            }
        }.setSelected(selected).execute();
    }

    private void createTable(String excelName)
    {
        DBOperator dbOperator = new DBOperator();
        dbOperator.createTableFromExcel(excelName);
    }

    private void importExcel(String excelName)
    {
        DBOperator dbOperator = new DBOperator();
        dbOperator.insertDataFromExcel(excelName);
    }

    /**
     * 该方法将在SwingWorker工作线程中执行
     *
     * @param selected
     */
    private void generateLuaJavaCode(List<String> selected)
    {
        outTextArea.append("开始 ...\n");
        setAllButtonEnabled(false);
        new SwingWorker<String, String>()
        {
            private List<String> selected;

            public SwingWorker setSelected(List<String> selected)
            {
                this.selected = selected;
                return this;
            }

            @Override
            public String doInBackground()
            {
                OptionConfigure single =  OptionConfigure.getInstance();
                JavaGenerator generator = new JavaGenerator("game.data", single.getJavaCodePath(), single.getLuaCodePath(), single.getJSCodePath(), single.getCSharpCodePath());
                try
                {
                    generator.generateAll(selected, new IPublish()
                    {
                        @Override
                        public void publishInfo(String str)
                        {
                            publish(str);
                        }
                    });
                }
                catch (Exception ex)
                {
                    displayException(ex);
                }
                return "";
            }

            @Override
            public void process(List<String> data)
            {
                for (String str : data)
                {
                    outTextArea.append("生成代码: " + str + "\n");
                }
            }

            @Override
            public void done()
            {
                outTextArea.append("完成\n");
                setAllButtonEnabled(true);
            }
        }.setSelected(selected).execute();
    }

    private void setAllButtonEnabled(boolean enable)
    {
        createImportSingleTableButton.setEnabled(enable);
        createImportAllTableButton.setEnabled(enable);
        generateLuaJavaCodeButton.setEnabled(enable);
    }

    private void displayException(Exception ex)
    {
        EventQueue.invokeLater(new Runnable()
        {
            private Exception e;

            public Runnable setException(Exception e)
            {
                this.e = e;
                return this;
            }

            @Override
            public void run()
            {
                if (e instanceof ExplainEmptyException)
                {
                    ExplainEmptyException ex = (ExplainEmptyException) e;
                    Formatter fmt = new Formatter();
                    fmt.format("第5行解释字段有为空的列\n文件: %s\n工作表: %s\n字段名: %s", ex.getFilePath(), ex.getSheetName(), ex.getField().getName());
                    JOptionPane.showConfirmDialog(ExcelPanel.this, fmt.toString(), "Excel格式错误", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                }
                else if (e instanceof CannotCastNumberException)
                {
                    CannotCastNumberException ex = (CannotCastNumberException) e;
                    Formatter fmt = new Formatter();
                    fmt.format("有类型为int但无法转化成数值的内容\n文件: %s\n工作表: %s\n字段名: %s\n字段类型: %s", ex.getFilePath(), ex.getSheetName(), ex.getField().getName(), ex.getField().getClassName());
                    JOptionPane.showConfirmDialog(ExcelPanel.this, fmt.toString(), "Excel格式错误", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                }
                else if (e instanceof DBOperatorException)
                {
                    DBOperatorException ex = (DBOperatorException) e;
                    Formatter fmt = new Formatter();
                    fmt.format("插入数据错误\n文件: %s\n工作表: %s\n原因: %s", ex.getFilePath(), ex.getSheetName(), ex.getSuppressed()[0].getMessage());
                    JOptionPane.showConfirmDialog(ExcelPanel.this, fmt.toString(), "Excel格式错误", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    log.error("in displayException ", e);
                    outTextArea.append(e.getClass().getName() + "\n");
                    StackTraceElement[] traces = e.getStackTrace();
                    for (StackTraceElement trace : traces)
                    {
                        outTextArea.append("\tat " + trace + "\n");
                    }
                }
            }
        }.setException(ex));
    }

    public final void refreshFileList()
    {
        List<String> list = ExcelLists.getFileList();
        if (list != null)
        {
            DefaultListModel model = new DefaultListModel();
            jList1.setModel(model);
            for (String s : list)
            {
                model.addElement(s);
            }
        }
        else
        {
            outTextArea.append("\nExcelList empty\n");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createImportAllTableButton;
    private javax.swing.JButton createImportSingleTableButton;
    private javax.swing.JButton generateLuaJavaCodeButton;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
